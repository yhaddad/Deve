  /// \file EventDisplay.hh
/*
 *
 * EventDisplay.hh header template generated by fclass
 * Creation date : mar. sept. 24 2013
 *
 * This file is part of XXX libraries.
 * 
 * XXX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * XXX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Eté Rémi
 * @version
 * @copyright
 *
 *
 */


#ifndef EVENTDISPLAY_HH
#define EVENTDISPLAY_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <fcntl.h>

// lcio includes
#include "IO/LCReader.h"
#include "IOIMPL/LCFactory.h"

// root includes
#include "TEveManager.h"
#include "TSystem.h"

// deve include
#include "ObjectLoader.hh"
#include "EventLoader.hh"

namespace deve {


	class EventLoader;

	/*!
	*
	* @brief  EventDisplay class
	*
	*/
	class EventDisplay {

		public:

			/*!
			*
			* @brief  Default constructor
			*
			*/
			EventDisplay();

			/*!
			*
			* @brief  Default destructor
			*
			*/
			virtual ~EventDisplay();

			/*!
			 *
			 * @brief Initialize the event display
			 *
			 */
			void initialize();

			/*!
			 *
			 * @brief Register an object loader
			 *
			 */
			void registerObjectLoader( ObjectLoader * );

			/*!
			 *
			 * @brief Return the object loaders
			 *
			 */
			const std::map<std::string , ObjectLoader *> &getObjectLoaders() { return objectLoaders; }

			/*!
			 *
			 * @brief Return the TEveManager
			 *
			 */
			static TEveManager *getEveManager() { return eveManager; }

			/*!
			 *
			 * @brief Pause the current thread to handle the eve Window correctly.
			 * This has to be used in Marlin processor for example
			 *
			 */
			void pause();

			/*!
			 *
			 * @brief Load the lcio file and load the first event
			 *
			 */
			void loadLcioFile( const std::string &fileName );

			/*!
			 *
			 * @brief Load an event from the run id and event id.
			 *
			 */
			void loadEvent( int runNb , int eventNb );


		protected:

			std::map< std::string , ObjectLoader* > objectLoaders;    ///< The object loaders
			static TEveManager *eveManager;
			bool isInitialized;
			EventLoader *eventLoader;
			IO::LCReader *lcReader;
			EVENT::LCEvent *currentEvent;


	};  // class

}  // namespace 

#endif  //  EVENTDISPLAY_HH
