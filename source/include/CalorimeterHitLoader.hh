  /// \file CalorimeterHitLoader.hh
/*
 *
 * CalorimeterHitLoader.hh header template generated by fclass
 * Creation date : mar. sept. 24 2013
 *
 * This file is part of Deve libraries.
 * 
 * Deve is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Deve is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Deve.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Eté Rémi
 * @version
 * @copyright
 *
 *
 */


#ifndef CALORIMETERHITLOADER_HH
#define CALORIMETERHITLOADER_HH

#include "ObjectLoader.hh"

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>

// lcio includes
#include "EVENT/LCIO.h"
#include "EVENT/CalorimeterHit.h"
#include "UTIL/CellIDDecoder.h"

// root includes
#include "TEveBoxSet.h"
#include "TVector3.h"


namespace deve {

	/*!
	 *
	 * @brief  CalorimeterHitLoader class
	 * Inherits from base class ObjectLoader
	 *
	 */
	class CalorimeterHitLoader : public ObjectLoader {

		public:

			/*!
			 *
			 * @brief  Default constructor
			 *
			 */
			CalorimeterHitLoader()
				: ObjectLoader( EVENT::LCIO::CALORIMETERHIT ),
				  decoderString( "M:3,S-1:3,I:9,J:9,K-1:6" ) {}

			/*!
			 *
			 * @brief  Default destructor
			 *
			 */
			virtual ~CalorimeterHitLoader();

			/*!
			 *
			 * @brief Load the specific objects from a lcio LCCollection pointer
			 *
			 */
			virtual void loadObjectsFromLCCollection( EVENT::LCCollection * , const std::string &colName );

			/*!
			 *
			 * @brief Load objects from an other framework.
			 *
			 */
			virtual void loadObjects( void * );

			/*!
			 *
			 * @brief Set the decoder string used for I, J, K, module and stave
			 *
			 */
			void setDecoderString( const std::string &decStr ) { decoderString = decStr; }


		protected:

			/*!
			 *
			 * @brief Return the cell size factor of a calorimeter hit collection with a given name colName
			 *
			 */
			float getCellSizeFactor( const std::string &colName );

			/*!
			 *
			 * @brief Build the calorimeter hit cell box wrt the collection name
			 *
			 */
			TEveBoxSet *buildCaloHitCell( CalorimeterHit *caloHit , const std::string &colName );


			std::string decoderString;    ///< The decoder string specific to the calorimeter


	};  // class

}  // namespace 

#endif  //  CALORIMETERHITLOADER_HH
